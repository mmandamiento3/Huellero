@model Huellero.Models.TblUsuario

@{
    ViewData["Title"] = "Create";
}

<h1>Nuevo Usuario</h1>


<hr />
<div class="row">

    <div class="col-md-6">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div>
                <div class="form-group">
                    <label asp-for="VNombres" class="control-label">Nombres</label>
                    <input asp-for="VNombres" class="form-control" />
                    <span asp-validation-for="VNombres" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="VApellidos" class="control-label">Apellidos</label>
                    <input asp-for="VApellidos" class="form-control" />
                    <span asp-validation-for="VApellidos" class="text-danger"></span>
                </div>

            </div>                 
            <br />  
           <br />

                <div class="row">
                    <div class="col" >
                     <label class="control-label">Dispositivos:</label>
                     </div>
                     <div class="col">
                        <select name="Dispositivos" id ="disposi" class="form-control" asp-items="@ViewBag.Dispositivoss"></select>
                    </div>

                    
                    <div class="col">
                     <div class="col col-lg-3">

                     </div>
                        <input value="Iniciar" class="btn btn-success" onclick="InicializarHuellero()"/>
                    
                     </div>
                </div>

            <br />
            <div class="form-group">
                    <label asp-for="VHuella" class="control-label">Huella</label>
                    <input asp-for="VHuella" id ="Huella" class="form-control" />
            </div>
            <br />

            <div class="form-group">
                <input type="submit" id="Capturar" value="Capturar" class="btn btn-dark"/>
            </div>
            <br />
            <br />
            @*--Estado:*@
            <label id="Estado" ></label>

            <br />
            <br />

            
            <div class="form-group">
                <input type="submit" id="Guardar" value="Guardar" class="btn btn-primary" />
            </div>

            <br />
            <br />
            
        </form>
    </div>

@*    <div class="col-md-6"-">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
*@
            


@*
        </form>
    </div>*@
</div>
<br />
<br />
<div>
    <a asp-action="Index">Back to List</a>
</div>

<script src="~/js/knockout-3.5.1.js"></script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

<script type="text/javascript">
    Deshabilitar(true);
    function Deshabilitar (bool){
           
            document.getElementById("Capturar").disabled= bool;
            //document.getElementById("Guardar").disabled= bool;
            document.getElementById("Huella").disabled= bool;
            
    }

      function InicializarHuellero() {

            var estadoConexion = document.getElementById("Estado");
            var ValorSeleccionado = document.getElementById("disposi").value;
            //console.log(ValorSeleccionado);
            $('.loading').show();
            let url = "/TblUsuarios/AbrirDispositivo";

            $.ajax({
                url: url,
                cache :false,
                type: 'POST',
                data: { ValorSeleccionado, ValorSeleccionado },
                success: function (data){
                    if(data == 0){
                        Deshabilitar(false);
                        estadoConexion.innerHTML = "Estado: Inicialización Exitosa";
                    }
                    else
                    {
                        Deshabilitar(true);
                        estadoConexion.innerHTML = "Estado : " + DevuelveError(data);
                    }
                }
            });
     }


     function DevuelveError(numero){
            var rpta = "";
         switch (numero){
            
                case 0:                             //SGFDX_ERROR_NONE				= 0,
                    return rpta = "Inicialización Exitosa";
                    break;

                case 1:                             //SGFDX_ERROR_CREATION_FAILED	= 1,
                    return rpta = "Can not create object";
                    break;

                case 2:                             //   SGFDX_ERROR_FUNCTION_FAILED	= 2,
                    return rpta = "Function Failed";
                    break;

                case 3:                             //   SGFDX_ERROR_INVALID_PARAM	= 3,
                    return rpta = "Invalid Parameter";
                    break;

                case 4:                          //   SGFDX_ERROR_NOT_USED			= 4,
                    return rpta = "Not used function";
                    break;

                case 5:                                //SGFDX_ERROR_DLLLOAD_FAILED	= 5,
                    return rpta = "Can not create object";
                    break;

                case 6:                                //SGFDX_ERROR_DLLLOAD_FAILED_DRV	= 6,
                    return rpta = "Can not load device driver";
                    break;
                case 7:                                //SGFDX_ERROR_DLLLOAD_FAILED_ALGO = 7,
                    return rpta = "Can not load sgfpamx.dll";
                    break;

                case 51:                //SGFDX_ERROR_SYSLOAD_FAILED	   = 51,	// system file load fail
                    return rpta = "Can not load driver kernel file";
                    break;

                case 52:                //SGFDX_ERROR_INITIALIZE_FAILED  = 52,   // chip initialize fail
                    return rpta = "Failed to initialize the device";
                    break;

                case 53:                //SGFDX_ERROR_LINE_DROPPED		   = 53,   // image data drop
                    return rpta = "Data transmission is not good";
                    break;

                case 54:                //SGFDX_ERROR_TIME_OUT			   = 54,   // getliveimage timeout error
            return rpta = "Time out";
                    break;

                case 55:                //SGFDX_ERROR_DEVICE_NOT_FOUND	= 55,   // device not found
            return rpta = "Device not found";
                    break;

                case 56:                //SGFDX_ERROR_DRVLOAD_FAILED	   = 56,   // dll file load fail
                    return rpta = "Can not load driver file";
                    break;

                case 57:                //SGFDX_ERROR_WRONG_IMAGE		   = 57,   // wrong image
                    return rpta = "Wrong Image";
                    break;

                case 58:                //SGFDX_ERROR_LACK_OF_BANDWIDTH  = 58,   // USB Bandwith Lack Error
                    return rpta = "Lack of USB Bandwith";
                    break;

                case 59:                //SGFDX_ERROR_DEV_ALREADY_OPEN	= 59,   // Device Exclusive access Error
                    return rpta = "Device is already opened";
                    break;

                case 60:                //SGFDX_ERROR_GETSN_FAILED		   = 60,   // Fail to get Device Serial Number
                    return rpta = "Device serial number error";
                    break;

                case 61:                //SGFDX_ERROR_UNSUPPORTED_DEV		   = 61,   // Unsupported device
                    return rpta = "Unsupported device";
                    break;

                // Extract & Verification error
                case 101:                //SGFDX_ERROR_FEAT_NUMBER		= 101, // utoo small number of minutiae
                    return rpta = "The number of minutiae is too small";
                    break;

                case 102:                //SGFDX_ERROR_INVALID_TEMPLATE_TYPE		= 102, // wrong template type
                    return rpta = "Template is invalid";
                    break;

                case 103:                //SGFDX_ERROR_INVALID_TEMPLATE1		= 103, // wrong template type
                       return rpta = "1st template is invalid";
                    break;

                case 104:                //SGFDX_ERROR_INVALID_TEMPLATE2		= 104, // vwrong template type
                    return rpta = "2nd template is invalid";
                    break;

                case 105:                //SGFDX_ERROR_EXTRACT_FAIL		= 105, // extraction fail
                    return rpta = "Minutiae extraction failed";
                    break;

                case 106:                //SGFDX_ERROR_MATCH_FAIL		= 106, // matching  fail
                    return rpta = "Matching failed";
                    break;
         }

     }
    
</script>
